/*======================================================
 ■■■ 컬렉션 프레임워크(Collection Framework) ■■■
 =====================================================*/

/*
○ 컬렉션 프레임워크(Collection Framework,컬렉션, 자바 컬렉션) --> 치밀하게 남겨놓은 자료구조
   = 컬렉션(Collection) + 프레임워크(Framework) : ~한 환경, 틀, 약속 안에서 모아놓은 것들을 대해달라
	 ------------------   ---------------------
	 		|				환경, 틀, 약속	   
			|

		  집합 -> 수집품, 소장품, (물건, 사람들의) 무리, 더미, 수집, 수거
		  		  -------------------------------------------------------
				  				모아 놓은 것들 (모여 있는 것들)...

	=> 자료 구조


○ 자료 (≠ 정보 : 자료를 (토대로) 검토하고 분석 -> 정보를 통해 경영 등을 하는 것)
   현실 세계로부터 단순한 관찰이나 측정을 통해 수집된
   사실이나 개념의 값들 또는 그 값들의 집합.

   ↓

○ 자료구조
   자료 처리를 위한 자료의 표현, 저장, 관계, 관리 및
   이용에 관한 방법 등의 개념을 이해하여 프로그램에 사용하고
   컴퓨터에 의해 처리되는 과정에서 적절한 자료의 표현, 구성, 저장 및
   처리를 위한 알고리즘 작성 및 선택과 이용 방법을 연구하는 분야.
   -> 어떤 것을 담을 그릇,용기에 대한 특징을 알아야 어떤걸 담을 때, 어떤 용기, 그릇에 담아야 하는지 알 수 있듯이
   우리는 그릇, 용기에 대해서 공부해야한다 + 담을 것에 대해서도 잘 알아야 한다.
   
   ↓

○ 컬렉션 프레임워크(Collection Framework)
   컬렉션 (모아놓은 데이터들)의 표현과 조작을 위한 통일된 아키텍처로
   컬렉션 프레임워크를 구성하는 요소는 다음과 같다.

   1. 인터페이스(Interface)
      기본적으로 컬렉션에 필요한 데이터 관리 기능을 제공한다.
	  예를 들어, list는 추가, 삭제, 검색 등의 기능을 제공하는
	  컬렉션 인터페이스가 존재하며,
	  각 컬렉션마다 고유의 인터페이스가 정의되어 있다.

	  list 자료구조 -> 순서가 의미가 있는 목록 (ex. 출석부,회원명단...)
	  set 자료구조 -> 중복을 허용하지 않고, 순서가 의미 없음 (공이 들어있는 주머니)
	  Map 자료구조 -> set자료구조와 비슷하게 순서가 의미 없지만, 공에 연결된 낚시줄에 푯말(a,b,c,d..)이 붙어있다.
					  이때 푯말이 키고, 공이 벨류이다. (공끝에 낚시줄)

   2. 구현(Implementation)
   	  인터페이스를 구현한 클래스로 각 컬렉션을
	  실제 어떤 자료구조를 이용하여 표현했느냐에 따라
	  컬렉션의 종류가 달라지게 된다.(set, list, map.. 등으로 성격이 구분된다)

   3. 알고리즘(Algorithms)
	  각 컬렉션들마다 유용하게 사용될 수 있는 메소드를 의미한다.

※ 자바의 컬렉션은 견고한 컬렉션 프레임워크 위에 정의되어 있으므로
   각 컬렉션 종류마다 제공되는 메소드의 일관성이 있기 때문에
   한 가지 컬렉션을 익혀두면 다른 컬렉션을 사용하는데 용이하다.

○ 스택(Stack) -> 적극적으로 써라! 는 아님. 컬렉션 재정비 이전에 사용하던 자료구조(ex.놋그릇)
   (넣은 순서대로 꺼낼 수 없음. 운영체제에서 리소스 관리에 쓰는 자료구조가 스택)
   (스택에서는 맨 위꺼가 제일 중요)

   - 제네릭, 제네릭 표현식 (안에 뭐가 담겨있는지 써놓는 문법? -> 편하고 안정성 있음)
   Stack <String> st = new Stack<String> ();
	
   Stack 클래스는 오브젝트 후입선출(LIFO) 구조의 Stack 을 나타낸다.
   이는 벡터(Vector)를 스택으로 처리하는 5개의 메소드로
   벡터(Vector) 클래스를 확장하게 된다.

   통상의 push() 메소드와 pop() 메소드가 제공되는 것 외에
   스택의 선두 항목으로 peek() 을 실시하는 메소드,
   스택이 비어있는지의 여부를 확인하는 메소드 isEmpty().
   스택으로 항목을 찾아서 선두로부터 몇 번째인지를 찾아내는 메소드 등이 제공된다.
	
   스택이 처음으로 작성되었을 때, 항목은 존재하지 않는다.

   - boolean empty()
   스택이 비어있는지 확인한다.
   - E Object peek()
   스택의 맨 위의 객체(중요함)를 스택에서 제거하지 않고 반환한다.
   - E Object pop()
   스택의 맨 위의 객체를 반환하고 스택에서 제거한다.
   - E Object push(E item)
   객체를 스택 자료구조에 저장한다.
   - int search(Object o)
   스택의 맨 위에서부터 파라미터 값으로 넘겨받은 객체까지의 거리를 반환한다.
   맨 위의 객체의 경우 1을 반환하고 그 아래 객체는 2를 반환하는 형식.

   컬렉션을 재정비하면서 기능이 같은 메소드들이 있다.


   

*/

// 제네릭, 제네릭 표현식

import java.util.Stack;

public class Test154
{
	public static void main(String[] args)
	{
		// Stack 자료구조 생성
		Stack<Object> myStack = new Stack<Object>();

		String str1 = "이주형";
		String str2 = "임하성";
		String str3 = "정한울";
		String str4 = "정현욱";

		// myStack 이라는 Stack 자료구조 안에 str1 ~ str4 까지 담아내기
		// add(), push() 둘 다 자료구조안에 담을(적재할) 수 있는 메소드다.
		myStack.add(str1);
		myStack.add(str2);
		myStack.push(str3);
		myStack.push(str4);
		
		// peek() : 스택 맨 위의 객체 반환. 제거하지 않는다.(그대로 있는 상태)
		String val1 = (String)myStack.peek();      // 우항 Object타입 반환 -> 다운캐스팅 필요
		System.out.println("val1 : " + val1);
		//--==>> val1 : 정현욱					   // 마지막에 담은 게 먼저 나옴

		String val2 = (String)myStack.peek();      // 우항 Object타입 반환 -> 다운캐스팅 필요
		System.out.println("val2 : " + val2);
		//--==>> val2 : 정현욱					   // 제거하지 않아서 그대로 나옴
		
		String val3 = (String)myStack.peek();      // 우항 Object타입 반환 -> 다운캐스팅 필요
		System.out.println("val3 : " + val3);
		//--==>> val3 : 정현욱					   // 제거하지 않아서 그대로 나옴


		String value = "";

		while (!myStack.isEmpty())				   // myStack 이라는 자료구조가 비어있는 상태가 아니라면~
		{
			//pop() : 스택 맨 위의 객체 반환. 제거한다.
			value = (String)myStack.pop();
			System.out.println("value : " + value);
		}
		/*
		--==>> value : 정현욱
			   value : 정한울
			   value : 임하성
			   value : 이주형
		*/
	}
}